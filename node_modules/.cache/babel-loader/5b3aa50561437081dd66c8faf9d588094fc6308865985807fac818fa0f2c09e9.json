{"ast":null,"code":"// mockApi.js\nlet mockGameId = 1;\nconst mockGame = {\n  id: mockGameId,\n  name: \"Adventure Time\",\n  currentTurn: 1,\n  maxTurns: 20,\n  turnsLeft: 19\n};\nconst mockPlayer = {\n  id: 101,\n  name: \"Finn\",\n  hp: 100,\n  maxHp: 100,\n  shield: 0,\n  gameId: mockGameId\n};\nconst mockMonster = {\n  id: 201,\n  name: \"Ice King\",\n  hp: 80,\n  maxHp: 80,\n  shield: 0,\n  gameId: mockGameId\n};\nconst mockCards = [{\n  id: 1,\n  effect: \"DAMAGE\",\n  value: 10,\n  cost: 1\n}, {\n  id: 2,\n  effect: \"DAMAGE\",\n  value: 15,\n  cost: 2\n}, {\n  id: 3,\n  effect: \"HEAL\",\n  value: 10,\n  cost: 1\n}, {\n  id: 4,\n  effect: \"SHIELD\",\n  value: 5,\n  cost: 1\n}];\nexport const mockApi = {\n  getGame: gameId => {\n    return {\n      data: {\n        ...mockGame,\n        id: gameId\n      }\n    };\n  },\n  getPlayer: gameId => {\n    return {\n      data: {\n        ...mockPlayer,\n        gameId\n      }\n    };\n  },\n  getMonster: gameId => {\n    return {\n      data: {\n        ...mockMonster,\n        gameId\n      }\n    };\n  },\n  getPlayerCards: async playerId => {\n    return {\n      data: mockCards\n    };\n  },\n  nextTurn: (gameId, cardId) => {\n    // Fake monster effect\n    const monsterEffect = {\n      effect: \"ATTACK\",\n      value: 5\n    };\n    return {\n      data: {\n        game: {\n          ...mockGame,\n          id: gameId,\n          currentTurn: mockGame.currentTurn + 1,\n          turnsLeft: mockGame.turnsLeft - 1\n        },\n        monsterEffect\n      }\n    };\n  },\n  newGame: name => {\n    mockGameId++;\n    return {\n      data: {\n        id: mockGameId,\n        name\n      }\n    };\n  }\n};","map":{"version":3,"names":["mockGameId","mockGame","id","name","currentTurn","maxTurns","turnsLeft","mockPlayer","hp","maxHp","shield","gameId","mockMonster","mockCards","effect","value","cost","mockApi","getGame","data","getPlayer","getMonster","getPlayerCards","playerId","nextTurn","cardId","monsterEffect","game","newGame"],"sources":["/Users/eri/adventureTime/src/utils/mockApi.js"],"sourcesContent":["// mockApi.js\nlet mockGameId = 1;\n\nconst mockGame = {\n  id: mockGameId,\n  name: \"Adventure Time\",\n  currentTurn: 1,\n  maxTurns: 20,\n  turnsLeft: 19,\n};\n\nconst mockPlayer = {\n  id: 101,\n  name: \"Finn\",\n  hp: 100,\n  maxHp: 100,\n  shield: 0,\n  gameId: mockGameId,\n};\n\nconst mockMonster = {\n  id: 201,\n  name: \"Ice King\",\n  hp: 80,\n  maxHp: 80,\n  shield: 0,\n  gameId: mockGameId,\n};\n\nconst mockCards = [\n  { id: 1, effect: \"DAMAGE\", value: 10, cost: 1 },\n  { id: 2, effect: \"DAMAGE\", value: 15, cost: 2 },\n  { id: 3, effect: \"HEAL\", value: 10, cost: 1 },\n  { id: 4, effect: \"SHIELD\", value: 5, cost: 1 },\n];\n\nexport const mockApi = {\n  getGame:  (gameId) => {\n    return { data: { ...mockGame, id: gameId } };\n  },\n\n  getPlayer:  (gameId) => {\n    return { data: { ...mockPlayer, gameId } };\n  },\n\n  getMonster: (gameId) => {\n    return { data: { ...mockMonster, gameId } };\n  },\n\n  getPlayerCards: async (playerId) => {\n    return { data: mockCards };\n  },\n\n  nextTurn: (gameId, cardId) => {\n    // Fake monster effect\n    const monsterEffect = {\n      effect: \"ATTACK\",\n      value: 5,\n    };\n\n    return {\n      data: {\n        game: {\n          ...mockGame,\n          id: gameId,\n          currentTurn: mockGame.currentTurn + 1,\n          turnsLeft: mockGame.turnsLeft - 1,\n        },\n        monsterEffect,\n      },\n    };\n  },\n\n  newGame:  (name) => {\n    mockGameId++;\n    return { data: { id: mockGameId, name } };\n  },\n};\n"],"mappings":"AAAA;AACA,IAAIA,UAAU,GAAG,CAAC;AAElB,MAAMC,QAAQ,GAAG;EACfC,EAAE,EAAEF,UAAU;EACdG,IAAI,EAAE,gBAAgB;EACtBC,WAAW,EAAE,CAAC;EACdC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,UAAU,GAAG;EACjBL,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,MAAM;EACZK,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAEX;AACV,CAAC;AAED,MAAMY,WAAW,GAAG;EAClBV,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,UAAU;EAChBK,EAAE,EAAE,EAAE;EACNC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAEX;AACV,CAAC;AAED,MAAMa,SAAS,GAAG,CAChB;EAAEX,EAAE,EAAE,CAAC;EAAEY,MAAM,EAAE,QAAQ;EAAEC,KAAK,EAAE,EAAE;EAAEC,IAAI,EAAE;AAAE,CAAC,EAC/C;EAAEd,EAAE,EAAE,CAAC;EAAEY,MAAM,EAAE,QAAQ;EAAEC,KAAK,EAAE,EAAE;EAAEC,IAAI,EAAE;AAAE,CAAC,EAC/C;EAAEd,EAAE,EAAE,CAAC;EAAEY,MAAM,EAAE,MAAM;EAAEC,KAAK,EAAE,EAAE;EAAEC,IAAI,EAAE;AAAE,CAAC,EAC7C;EAAEd,EAAE,EAAE,CAAC;EAAEY,MAAM,EAAE,QAAQ;EAAEC,KAAK,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAE,CAAC,CAC/C;AAED,OAAO,MAAMC,OAAO,GAAG;EACrBC,OAAO,EAAIP,MAAM,IAAK;IACpB,OAAO;MAAEQ,IAAI,EAAE;QAAE,GAAGlB,QAAQ;QAAEC,EAAE,EAAES;MAAO;IAAE,CAAC;EAC9C,CAAC;EAEDS,SAAS,EAAIT,MAAM,IAAK;IACtB,OAAO;MAAEQ,IAAI,EAAE;QAAE,GAAGZ,UAAU;QAAEI;MAAO;IAAE,CAAC;EAC5C,CAAC;EAEDU,UAAU,EAAGV,MAAM,IAAK;IACtB,OAAO;MAAEQ,IAAI,EAAE;QAAE,GAAGP,WAAW;QAAED;MAAO;IAAE,CAAC;EAC7C,CAAC;EAEDW,cAAc,EAAE,MAAOC,QAAQ,IAAK;IAClC,OAAO;MAAEJ,IAAI,EAAEN;IAAU,CAAC;EAC5B,CAAC;EAEDW,QAAQ,EAAEA,CAACb,MAAM,EAAEc,MAAM,KAAK;IAC5B;IACA,MAAMC,aAAa,GAAG;MACpBZ,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;IACT,CAAC;IAED,OAAO;MACLI,IAAI,EAAE;QACJQ,IAAI,EAAE;UACJ,GAAG1B,QAAQ;UACXC,EAAE,EAAES,MAAM;UACVP,WAAW,EAAEH,QAAQ,CAACG,WAAW,GAAG,CAAC;UACrCE,SAAS,EAAEL,QAAQ,CAACK,SAAS,GAAG;QAClC,CAAC;QACDoB;MACF;IACF,CAAC;EACH,CAAC;EAEDE,OAAO,EAAIzB,IAAI,IAAK;IAClBH,UAAU,EAAE;IACZ,OAAO;MAAEmB,IAAI,EAAE;QAAEjB,EAAE,EAAEF,UAAU;QAAEG;MAAK;IAAE,CAAC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}